const Telegram_Api = require('node-telegram-bot-api')

const token = '7597104065:AAGNUru4VQ1ASJnBeK-g3ryNXBRep1TKioA'

const bot = new Telegram_Api(token, {polling: true})

const {gameOptions, againOptions , guessOptions} = require('./options') 

const chats = {}
const numFind = {}


const express = require('express');
const app = express();

app.get('/', (req, res) => res.send('Bot is alive'));
app.listen(process.env.PORT || 3000);




const startGame = async (chatId) =>{
    await bot.sendMessage(chatId , '–°–µ–π—á–∞—Å —è –∑–∞–≥–∞–¥–∞—é —á–∏—Å–ª–æ –∞ —Ç—ã –Ω–∞–π–¥–∏');
    const randomNumber = Math.floor(Math.random() * 10)
    chats[chatId] = randomNumber;
    await bot.sendMessage(chatId , '–æ—Ç–≥–∞–¥—ã–≤–∞–π' , gameOptions)
}

const start = () => {
    bot.setMyCommands([
        {command: 'start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},
        {command: 'info', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç'},
        {command: 'game', description: '–û—Ç–≥–∞–¥–∞–π —á–∏—Å–ª–æ'},
        {command: 'findNumber', description: '–£–≥–∞–¥–∞—é —á–∏—Å–ª–æ –∑–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤'},
    ])

    
    bot.on('message' , async msg => {
        const text = msg.text;
        const chatId = msg.chat.id;
        if(text === '/start'){
           await bot.sendSticker(chatId , 'https://cdn2.combot.org/programmer_xd/webp/1xf09f8e97.webp');
           return bot.sendMessage(chatId, 'Fuck you');
        }
        if(text === '/game'){
            return startGame(chatId);
        }
        if(text === '/findNumber'){
            numFind[chatId] = {l: 1 , r : 1000};
            const mid  = Math.floor((1 + 1000) / 2);
            await bot.sendMessage(chatId , '–Ø –±—É–¥—É –∑–∞–≥–æ–¥–∞—Ç—å –≤–∞—à–µ —á–∏—Å–ª–æ –∑–∞ 10 –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–±–µ—Ä–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000');
            numFind[chatId].mid = mid;
            return bot.sendMessage(chatId , `–≠—Ç–æ ${mid}`, guessOptions);

            

        }
        if (text === '/info') {
            return bot.sendMessage(chatId, `
            –Ø —É–º–µ—é:
            - üéØ /game ‚Äî –Ø –∑–∞–≥–∞–¥–∞—é —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9, –ø–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!
            - üß† /findNumber ‚Äî –¢—ã –∑–∞–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000, —è –ø–æ–ø—Ä–æ–±—É—é —É–≥–∞–¥–∞—Ç—å.
            `);
        }

    })
}
bot.on('callback_query', async msg => {
    const data = msg.data;
    const chatId = msg.message.chat.id;

    // --- –ò–≥—Ä–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ ---
    if (data === '/again') {
        return startGame(chatId);
    }

    if (chats[chatId] !== undefined) {
        const correct = chats[chatId];
        if (data == correct) {
            delete chats[chatId];
            return bot.sendMessage(chatId, `–¢—ã —É–≥–∞–¥–∞–ª! –≠—Ç–æ —á–∏—Å–ª–æ: ${correct}`, againOptions);
        } else if (data !== correct && data !== 'more' && data !== 'less' && data !== 'equal') {
            delete chats[chatId];
            return bot.sendMessage(chatId, `–õ–û–•, —ç—Ç–æ –±—ã–ª–æ —á–∏—Å–ª–æ: ${correct}`, againOptions);
        }
    }

    // --- –ò–≥—Ä–∞: –±–æ—Ç —É–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ ---
    if (numFind[chatId]) {
        let { l, r, mid } = numFind[chatId];
        if (data === 'less') {
            r = mid - 1;
        } else if (data === 'more') {
            l = mid + 1;
        } else if (data === 'equal') {
            delete numFind[chatId];
            return bot.sendMessage(chatId, `–£—Ä–∞! –Ø —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ: ${mid}`);
        }

        if (l > r) {
            delete numFind[chatId];
            return bot.sendMessage(chatId, `–¢—ã –æ–±–º–∞–Ω—É–ª üò°`);
        }

        mid = Math.floor((l + r) / 2);
        numFind[chatId] = { l, r, mid };
        return bot.sendMessage(chatId, `–≠—Ç–æ ${mid}?`, guessOptions);
    }

    return bot.sendMessage(chatId, '–ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã –≤—ã–±—Ä–∞–ª ü§î');
});


start()